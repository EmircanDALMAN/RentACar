{"version":3,"file":"dropdown.d.ts","sources":["dropdown.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, AfterContentInit, OnDestroy, QueryList, Renderer2, SimpleChanges } from '@angular/core';\nimport { Placement, PlacementArray } from '../util/positioning';\nimport { NgbDropdownConfig } from './dropdown-config';\nexport declare class NgbNavbar {\n}\n/**\n * A directive you should put on a dropdown item to enable keyboard navigation.\n * Arrow keys will move focus between items marked with this directive.\n *\n * @since 4.1.0\n */\nexport declare class NgbDropdownItem {\n    elementRef: ElementRef<HTMLElement>;\n    static ngAcceptInputType_disabled: boolean | '';\n    private _disabled;\n    set disabled(value: boolean);\n    get disabled(): boolean;\n    constructor(elementRef: ElementRef<HTMLElement>);\n}\n/**\n * A directive that wraps dropdown menu content and dropdown items.\n */\nexport declare class NgbDropdownMenu {\n    dropdown: any;\n    nativeElement: HTMLElement;\n    placement: Placement | null;\n    isOpen: boolean;\n    menuItems: QueryList<NgbDropdownItem>;\n    constructor(dropdown: any, _elementRef: ElementRef<HTMLElement>);\n}\n/**\n * A directive to mark an element to which dropdown menu will be anchored.\n *\n * This is a simple version of the `NgbDropdownToggle` directive.\n * It plays the same role, but doesn't listen to click events to toggle dropdown menu thus enabling support\n * for events other than click.\n *\n * @since 1.1.0\n */\nexport declare class NgbDropdownAnchor {\n    dropdown: any;\n    nativeElement: HTMLElement;\n    constructor(dropdown: any, _elementRef: ElementRef<HTMLElement>);\n}\n/**\n * A directive to mark an element that will toggle dropdown via the `click` event.\n *\n * You can also use `NgbDropdownAnchor` as an alternative.\n */\nexport declare class NgbDropdownToggle extends NgbDropdownAnchor {\n    constructor(dropdown: any, elementRef: ElementRef<HTMLElement>);\n}\n/**\n * A directive that provides contextual overlays for displaying lists of links and more.\n */\nexport declare class NgbDropdown implements AfterContentInit, OnDestroy {\n    private _changeDetector;\n    private _document;\n    private _ngZone;\n    private _elementRef;\n    private _renderer;\n    static ngAcceptInputType_autoClose: boolean | string;\n    static ngAcceptInputType_display: string;\n    private _closed$;\n    private _zoneSubscription;\n    private _bodyContainer;\n    private _menu;\n    private _anchor;\n    /**\n     * Indicates whether the dropdown should be closed when clicking one of dropdown items or pressing ESC.\n     *\n     * * `true` - the dropdown will close on both outside and inside (menu) clicks.\n     * * `false` - the dropdown can only be closed manually via `close()` or `toggle()` methods.\n     * * `\"inside\"` - the dropdown will close on inside menu clicks, but not outside clicks.\n     * * `\"outside\"` - the dropdown will close only on the outside clicks and not on menu clicks.\n     */\n    autoClose: boolean | 'outside' | 'inside';\n    /**\n     * Defines whether or not the dropdown menu is opened initially.\n     */\n    _open: boolean;\n    /**\n     * The preferred placement of the dropdown.\n     *\n     * Possible values are `\"top\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom\"`, `\"bottom-left\"`,\n     * `\"bottom-right\"`, `\"left\"`, `\"left-top\"`, `\"left-bottom\"`, `\"right\"`, `\"right-top\"`,\n     * `\"right-bottom\"`\n     *\n     * Accepts an array of strings or a string with space separated possible values.\n     *\n     * The default order of preference is `\"bottom-left bottom-right top-left top-right\"`\n     *\n     * Please see the [positioning overview](#/positioning) for more details.\n     */\n    placement: PlacementArray;\n    /**\n    * A selector specifying the element the dropdown should be appended to.\n    * Currently only supports \"body\".\n    *\n    * @since 4.1.0\n    */\n    container: null | 'body';\n    /**\n     * Enable or disable the dynamic positioning. The default value is dynamic unless the dropdown is used\n     * inside a Bootstrap navbar. If you need custom placement for a dropdown in a navbar, set it to\n     * dynamic explicitly. See the [positioning of dropdown](#/positioning#dropdown)\n     * and the [navbar demo](/#/components/dropdown/examples#navbar) for more details.\n     *\n     * @since 4.2.0\n     */\n    display: 'dynamic' | 'static';\n    /**\n     * An event fired when the dropdown is opened or closed.\n     *\n     * The event payload is a `boolean`:\n     * * `true` - the dropdown was opened\n     * * `false` - the dropdown was closed\n     */\n    openChange: EventEmitter<boolean>;\n    constructor(_changeDetector: ChangeDetectorRef, config: NgbDropdownConfig, _document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _renderer: Renderer2, ngbNavbar: NgbNavbar);\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Checks if the dropdown menu is open.\n     */\n    isOpen(): boolean;\n    /**\n     * Opens the dropdown menu.\n     */\n    open(): void;\n    private _setCloseHandlers;\n    /**\n     * Closes the dropdown menu.\n     */\n    close(): void;\n    /**\n     * Toggles the dropdown menu.\n     */\n    toggle(): void;\n    ngOnDestroy(): void;\n    onKeyDown(event: KeyboardEvent): void;\n    private _isDropup;\n    private _isEventFromToggle;\n    private _getMenuElements;\n    private _positionMenu;\n    private _getFirstPlacement;\n    private _resetContainer;\n    private _applyContainer;\n    private _applyPlacementClasses;\n}\n"]}