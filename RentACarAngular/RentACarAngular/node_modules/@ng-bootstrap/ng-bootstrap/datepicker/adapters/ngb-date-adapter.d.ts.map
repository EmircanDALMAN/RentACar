{"version":3,"file":"ngb-date-adapter.d.ts","sources":["ngb-date-adapter.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgbDateStruct } from '../ngb-date-struct';\nexport declare function NGB_DATEPICKER_DATE_ADAPTER_FACTORY(): NgbDateStructAdapter;\n/**\n * An abstract service that does the conversion between the internal datepicker `NgbDateStruct` model and\n * any provided user date model `D`, ex. a string, a native date, etc.\n *\n * The adapter is used **only** for conversion when binding datepicker to a form control,\n * ex. `[(ngModel)]=\"userDateModel\"`. Here `userDateModel` can be of any type.\n *\n * The default datepicker implementation assumes we use `NgbDateStruct` as a user model.\n *\n * See the [date format overview](#/components/datepicker/overview#date-model) for more details\n * and the [custom adapter demo](#/components/datepicker/examples#adapter) for an example.\n */\nexport declare abstract class NgbDateAdapter<D> {\n    /**\n     * Converts a user-model date of type `D` to an `NgbDateStruct` for internal use.\n     */\n    abstract fromModel(value: D | null): NgbDateStruct | null;\n    /**\n     * Converts an internal `NgbDateStruct` date to a user-model date of type `D`.\n     */\n    abstract toModel(date: NgbDateStruct | null): D | null;\n}\nexport declare class NgbDateStructAdapter extends NgbDateAdapter<NgbDateStruct> {\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     */\n    fromModel(date: NgbDateStruct | null): NgbDateStruct | null;\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     */\n    toModel(date: NgbDateStruct | null): NgbDateStruct | null;\n}\n"]}