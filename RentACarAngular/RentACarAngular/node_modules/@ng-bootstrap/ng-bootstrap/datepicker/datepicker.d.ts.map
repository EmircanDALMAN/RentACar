{"version":3,"file":"datepicker.d.ts","sources":["datepicker.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NgbCalendar } from './ngb-calendar';\nimport { NgbDate } from './ngb-date';\nimport { NgbDatepickerService } from './datepicker-service';\nimport { DatepickerViewModel, NavigationEvent } from './datepicker-view-model';\nimport { DayTemplateContext } from './datepicker-day-template-context';\nimport { NgbDatepickerConfig } from './datepicker-config';\nimport { NgbDateAdapter } from './adapters/ngb-date-adapter';\nimport { NgbDateStruct } from './ngb-date-struct';\nimport { NgbDatepickerI18n } from './datepicker-i18n';\n/**\n * An event emitted right before the navigation happens and the month displayed by the datepicker changes.\n */\nexport interface NgbDatepickerNavigateEvent {\n    /**\n     * The currently displayed month.\n     */\n    current: {\n        year: number;\n        month: number;\n    } | null;\n    /**\n     * The month we're navigating to.\n     */\n    next: {\n        year: number;\n        month: number;\n    };\n    /**\n     * Calling this function will prevent navigation from happening.\n     *\n     * @since 4.1.0\n     */\n    preventDefault: () => void;\n}\n/**\n * An interface that represents the readonly public state of the datepicker.\n *\n * Accessible via the `datepicker.state` getter\n *\n * @since 5.2.0\n */\nexport interface NgbDatepickerState {\n    /**\n     * The earliest date that can be displayed or selected\n     */\n    readonly minDate: NgbDate | null;\n    /**\n     * The latest date that can be displayed or selected\n     */\n    readonly maxDate: NgbDate | null;\n    /**\n     * The first visible date of currently displayed months\n     */\n    readonly firstDate: NgbDate;\n    /**\n     * The last visible date of currently displayed months\n     */\n    readonly lastDate: NgbDate;\n    /**\n     * The date currently focused by the datepicker\n     */\n    readonly focusedDate: NgbDate;\n    /**\n     * First dates of months currently displayed by the datepicker\n     *\n     * @since 5.3.0\n     */\n    readonly months: NgbDate[];\n}\n/**\n * A directive that marks the content template that customizes the way datepicker months are displayed\n *\n * @since 5.3.0\n */\nexport declare class NgbDatepickerContent {\n    templateRef: TemplateRef<any>;\n    constructor(templateRef: TemplateRef<any>);\n}\n/**\n * A highly configurable component that helps you with selecting calendar dates.\n *\n * `NgbDatepicker` is meant to be displayed inline on a page or put inside a popup.\n */\nexport declare class NgbDatepicker implements OnDestroy, OnChanges, OnInit, ControlValueAccessor {\n    private _service;\n    private _calendar;\n    i18n: NgbDatepickerI18n;\n    private _elementRef;\n    private _ngbDateAdapter;\n    private _ngZone;\n    static ngAcceptInputType_autoClose: boolean | string;\n    static ngAcceptInputType_navigation: string;\n    static ngAcceptInputType_outsideDays: string;\n    model: DatepickerViewModel;\n    private _defaultDayTemplate;\n    private _contentEl;\n    contentTemplate: NgbDatepickerContent;\n    private _controlValue;\n    private _destroyed$;\n    private _publicState;\n    /**\n     * The reference to a custom template for the day.\n     *\n     * Allows to completely override the way a day 'cell' in the calendar is displayed.\n     *\n     * See [`DayTemplateContext`](#/components/datepicker/api#DayTemplateContext) for the data you get inside.\n     */\n    dayTemplate: TemplateRef<DayTemplateContext>;\n    /**\n     * The callback to pass any arbitrary data to the template cell via the\n     * [`DayTemplateContext`](#/components/datepicker/api#DayTemplateContext)'s `data` parameter.\n     *\n     * `current` is the month that is currently displayed by the datepicker.\n     *\n     * @since 3.3.0\n     */\n    dayTemplateData: (date: NgbDate, current?: {\n        year: number;\n        month: number;\n    }) => any;\n    /**\n     * The number of months to display.\n     */\n    displayMonths: number;\n    /**\n     * The first day of the week.\n     *\n     * With default calendar we use ISO 8601: 'weekday' is 1=Mon ... 7=Sun.\n     */\n    firstDayOfWeek: number;\n    /**\n     * The reference to the custom template for the datepicker footer.\n     *\n     * @since 3.3.0\n     */\n    footerTemplate: TemplateRef<any>;\n    /**\n     * The callback to mark some dates as disabled.\n     *\n     * It is called for each new date when navigating to a different month.\n     *\n     * `current` is the month that is currently displayed by the datepicker.\n     */\n    markDisabled: (date: NgbDate, current?: {\n        year: number;\n        month: number;\n    }) => boolean;\n    /**\n     * The latest date that can be displayed or selected.\n     *\n     * If not provided, 'year' select box will display 10 years after the current month.\n     */\n    maxDate: NgbDateStruct;\n    /**\n     * The earliest date that can be displayed or selected.\n     *\n     * If not provided, 'year' select box will display 10 years before the current month.\n     */\n    minDate: NgbDateStruct;\n    /**\n     * Navigation type.\n     *\n     * * `\"select\"` - select boxes for month and navigation arrows\n     * * `\"arrows\"` - only navigation arrows\n     * * `\"none\"` - no navigation visible at all\n     */\n    navigation: 'select' | 'arrows' | 'none';\n    /**\n     * The way of displaying days that don't belong to the current month.\n     *\n     * * `\"visible\"` - days are visible\n     * * `\"hidden\"` - days are hidden, white space preserved\n     * * `\"collapsed\"` - days are collapsed, so the datepicker height might change between months\n     *\n     * For the 2+ months view, days in between months are never shown.\n     */\n    outsideDays: 'visible' | 'collapsed' | 'hidden';\n    /**\n     * If `true`, weekdays will be displayed.\n     */\n    showWeekdays: boolean;\n    /**\n     * If `true`, week numbers will be displayed.\n     */\n    showWeekNumbers: boolean;\n    /**\n     * The date to open calendar with.\n     *\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date is provided, calendar will open with current month.\n     *\n     * You could use `navigateTo(date)` method as an alternative.\n     */\n    startDate: {\n        year: number;\n        month: number;\n        day?: number;\n    };\n    /**\n     * An event emitted right before the navigation happens and displayed month changes.\n     *\n     * See [`NgbDatepickerNavigateEvent`](#/components/datepicker/api#NgbDatepickerNavigateEvent) for the payload info.\n     */\n    navigate: EventEmitter<NgbDatepickerNavigateEvent>;\n    /**\n     * An event emitted when user selects a date using keyboard or mouse.\n     *\n     * The payload of the event is currently selected `NgbDate`.\n     *\n     * @since 5.2.0\n     */\n    dateSelect: EventEmitter<NgbDate>;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    constructor(_service: NgbDatepickerService, _calendar: NgbCalendar, i18n: NgbDatepickerI18n, config: NgbDatepickerConfig, cd: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, _ngbDateAdapter: NgbDateAdapter<any>, _ngZone: NgZone);\n    /**\n     *  Returns the readonly public state of the datepicker\n     *\n     * @since 5.2.0\n     */\n    get state(): NgbDatepickerState;\n    /**\n     *  Returns the calendar service used in the specific datepicker instance.\n     *\n     *  @since 5.3.0\n     */\n    get calendar(): NgbCalendar;\n    /**\n     *  Focuses on given date.\n     */\n    focusDate(date?: NgbDateStruct | null): void;\n    /**\n     *  Selects focused date.\n     */\n    focusSelect(): void;\n    focus(): void;\n    /**\n     * Navigates to the provided date.\n     *\n     * With the default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     *\n     * Use the `[startDate]` input as an alternative.\n     */\n    navigateTo(date?: {\n        year: number;\n        month: number;\n        day?: number;\n    }): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    onDateSelect(date: NgbDate): void;\n    onNavigateDateSelect(date: NgbDate): void;\n    onNavigateEvent(event: NavigationEvent): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(disabled: boolean): void;\n    writeValue(value: any): void;\n}\n"]}