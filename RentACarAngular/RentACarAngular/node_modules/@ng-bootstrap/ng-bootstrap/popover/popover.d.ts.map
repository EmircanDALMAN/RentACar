{"version":3,"file":"popover.d.ts","sources":["popover.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit, OnDestroy, OnChanges, Injector, Renderer2, ElementRef, TemplateRef, ViewContainerRef, ComponentFactoryResolver, NgZone, SimpleChanges, ChangeDetectorRef, ApplicationRef } from '@angular/core';\nimport { PlacementArray } from '../util/positioning';\nimport { NgbPopoverConfig } from './popover-config';\nexport declare class NgbPopoverWindow {\n    animation: boolean;\n    title: string | TemplateRef<any> | null | undefined;\n    id: string;\n    popoverClass: string;\n    context: any;\n    isTitleTemplate(): boolean;\n}\n/**\n * A lightweight and extensible directive for fancy popover creation.\n */\nexport declare class NgbPopover implements OnInit, OnDestroy, OnChanges {\n    private _elementRef;\n    private _renderer;\n    private _ngZone;\n    private _document;\n    private _changeDetector;\n    static ngAcceptInputType_autoClose: boolean | string;\n    /**\n     * If `true`, popover opening and closing will be animated.\n     *\n     * @since 8.0.0\n     */\n    animation: boolean;\n    /**\n     * Indicates whether the popover should be closed on `Escape` key and inside/outside clicks:\n     *\n     * * `true` - closes on both outside and inside clicks as well as `Escape` presses\n     * * `false` - disables the autoClose feature (NB: triggers still apply)\n     * * `\"inside\"` - closes on inside clicks as well as Escape presses\n     * * `\"outside\"` - closes on outside clicks (sometimes also achievable through triggers)\n     * as well as `Escape` presses\n     *\n     * @since 3.0.0\n     */\n    autoClose: boolean | 'inside' | 'outside';\n    /**\n     * The string content or a `TemplateRef` for the content to be displayed in the popover.\n     *\n     * If the title and the content are falsy, the popover won't open.\n     */\n    ngbPopover: string | TemplateRef<any> | null | undefined;\n    /**\n     * The title of the popover.\n     *\n     * If the title and the content are falsy, the popover won't open.\n     */\n    popoverTitle: string | TemplateRef<any> | null | undefined;\n    /**\n     * The preferred placement of the popover.\n     *\n     * Possible values are `\"top\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom\"`, `\"bottom-left\"`,\n     * `\"bottom-right\"`, `\"left\"`, `\"left-top\"`, `\"left-bottom\"`, `\"right\"`, `\"right-top\"`,\n     * `\"right-bottom\"`\n     *\n     * Accepts an array of strings or a string with space separated possible values.\n     *\n     * The default order of preference is `\"auto\"` (same as the sequence above).\n     *\n     * Please see the [positioning overview](#/positioning) for more details.\n     */\n    placement: PlacementArray;\n    /**\n     * Specifies events that should trigger the tooltip.\n     *\n     * Supports a space separated list of event names.\n     * For more details see the [triggers demo](#/components/popover/examples#triggers).\n     */\n    triggers: string;\n    /**\n     * A selector specifying the element the popover should be appended to.\n     *\n     * Currently only supports `body`.\n     */\n    container: string;\n    /**\n     * If `true`, popover is disabled and won't be displayed.\n     *\n     * @since 1.1.0\n     */\n    disablePopover: boolean;\n    /**\n     * An optional class applied to the popover window element.\n     *\n     * @since 2.2.0\n     */\n    popoverClass: string;\n    /**\n     * The opening delay in ms. Works only for \"non-manual\" opening triggers defined by the `triggers` input.\n     *\n     * @since 4.1.0\n     */\n    openDelay: number;\n    /**\n     * The closing delay in ms. Works only for \"non-manual\" opening triggers defined by the `triggers` input.\n     *\n     * @since 4.1.0\n     */\n    closeDelay: number;\n    /**\n     * An event emitted when the popover opening animation has finished. Contains no payload.\n     */\n    shown: EventEmitter<void>;\n    /**\n     * An event emitted when the popover closing animation has finished. Contains no payload.\n     *\n     * At this point popover is not in the DOM anymore.\n     */\n    hidden: EventEmitter<void>;\n    private _ngbPopoverWindowId;\n    private _popupService;\n    private _windowRef;\n    private _unregisterListenersFn;\n    private _zoneSubscription;\n    private _isDisabled;\n    constructor(_elementRef: ElementRef<HTMLElement>, _renderer: Renderer2, injector: Injector, componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, config: NgbPopoverConfig, _ngZone: NgZone, _document: any, _changeDetector: ChangeDetectorRef, applicationRef: ApplicationRef);\n    /**\n     * Opens the popover.\n     *\n     * This is considered to be a \"manual\" triggering.\n     * The `context` is an optional value to be injected into the popover template when it is created.\n     */\n    open(context?: any): void;\n    /**\n     * Closes the popover.\n     *\n     * This is considered to be a \"manual\" triggering of the popover.\n     */\n    close(): void;\n    /**\n     * Toggles the popover.\n     *\n     * This is considered to be a \"manual\" triggering of the popover.\n     */\n    toggle(): void;\n    /**\n     * Returns `true`, if the popover is currently shown.\n     */\n    isOpen(): boolean;\n    ngOnInit(): void;\n    ngOnChanges({ ngbPopover, popoverTitle, disablePopover, popoverClass }: SimpleChanges): void;\n    ngOnDestroy(): void;\n}\n"]}