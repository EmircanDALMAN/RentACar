{"version":3,"file":"radio.d.ts","sources":["radio.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NgbButtonLabel } from './label';\n/**\n * Allows to easily create Bootstrap-style radio buttons.\n *\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\n * either in a reactive or template-driven way.\n */\nexport declare class NgbRadioGroup implements ControlValueAccessor {\n    private _radios;\n    private _value;\n    private _disabled;\n    get disabled(): boolean;\n    set disabled(isDisabled: boolean);\n    /**\n     * Name of the radio group applied to radio input elements.\n     *\n     * Will be applied to all radio input elements inside the group,\n     * unless [`NgbRadio`](#/components/buttons/api#NgbRadio)'s specify names themselves.\n     *\n     * If not provided, will be generated in the `ngb-radio-xx` format.\n     */\n    name: string;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    onRadioChange(radio: NgbRadio): void;\n    onRadioValueUpdate(): void;\n    register(radio: NgbRadio): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n    unregister(radio: NgbRadio): void;\n    writeValue(value: any): void;\n    private _updateRadiosValue;\n    private _updateRadiosDisabled;\n}\n/**\n * A directive that marks an input of type \"radio\" as a part of the\n * [`NgbRadioGroup`](#/components/buttons/api#NgbRadioGroup).\n */\nexport declare class NgbRadio implements OnDestroy {\n    private _group;\n    private _label;\n    private _renderer;\n    private _element;\n    private _cd;\n    static ngAcceptInputType_disabled: boolean | '';\n    private _checked;\n    private _disabled;\n    private _value;\n    /**\n     * The value for the 'name' property of the input element.\n     *\n     * All inputs of the radio group should have the same name. If not specified,\n     * the name of the enclosing group is used.\n     */\n    name: string;\n    /**\n     * The form control value when current radio button is checked.\n     */\n    set value(value: any);\n    /**\n     * If `true`, current radio button will be disabled.\n     */\n    set disabled(isDisabled: boolean);\n    set focused(isFocused: boolean);\n    get checked(): boolean;\n    get disabled(): boolean;\n    get value(): any;\n    get nameAttr(): string;\n    constructor(_group: NgbRadioGroup, _label: NgbButtonLabel, _renderer: Renderer2, _element: ElementRef<HTMLInputElement>, _cd: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    onChange(): void;\n    updateValue(value: any): void;\n    updateDisabled(): void;\n}\n"]}