{"version":3,"file":"checkbox.d.ts","sources":["checkbox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NgbButtonLabel } from './label';\n/**\n * Allows to easily create Bootstrap-style checkbox buttons.\n *\n * Integrates with forms, so the value of a checked button is bound to the underlying form control\n * either in a reactive or template-driven way.\n */\nexport declare class NgbCheckBox implements ControlValueAccessor {\n    private _label;\n    private _cd;\n    static ngAcceptInputType_disabled: boolean | '';\n    checked: any;\n    /**\n     * If `true`, the checkbox button will be disabled\n     */\n    disabled: boolean;\n    /**\n     * The form control value when the checkbox is checked.\n     */\n    valueChecked: boolean;\n    /**\n     * The form control value when the checkbox is unchecked.\n     */\n    valueUnChecked: boolean;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    set focused(isFocused: boolean);\n    constructor(_label: NgbButtonLabel, _cd: ChangeDetectorRef);\n    onInputChange($event: any): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n    writeValue(value: any): void;\n}\n"]}