{"version":3,"file":"toast.d.ts","sources":["toast.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, EventEmitter, OnChanges, SimpleChanges, TemplateRef, ElementRef, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NgbToastConfig } from './toast-config';\n/**\n * This directive allows the usage of HTML markup or other directives\n * inside of the toast's header.\n *\n * @since 5.0.0\n */\nexport declare class NgbToastHeader {\n}\n/**\n * Toasts provide feedback messages as notifications to the user.\n * Goal is to mimic the push notifications available both on mobile and desktop operating systems.\n *\n * @since 5.0.0\n */\nexport declare class NgbToast implements AfterContentInit, OnChanges {\n    ariaLive: string;\n    private _zone;\n    private _element;\n    /**\n     * If `true`, toast opening and closing will be animated.\n     *\n     * Animation is triggered only when the `.hide()` or `.show()` functions are called\n     *\n     * @since 8.0.0\n     */\n    animation: boolean;\n    private _timeoutID;\n    /**\n     * Delay after which the toast will hide (ms).\n     * default: `500` (ms) (inherited from NgbToastConfig)\n     */\n    delay: number;\n    /**\n     * Auto hide the toast after a delay in ms.\n     * default: `true` (inherited from NgbToastConfig)\n     */\n    autohide: boolean;\n    /**\n     * Text to be used as toast's header.\n     * Ignored if a ContentChild template is specified at the same time.\n     */\n    header: string;\n    /**\n     * A template like `<ng-template ngbToastHeader></ng-template>` can be\n     * used in the projected content to allow markup usage.\n     */\n    contentHeaderTpl: TemplateRef<any> | null;\n    /**\n     * An event fired after the animation triggered by calling `.show()` method has finished.\n     *\n     * @since 8.0.0\n     */\n    shown: EventEmitter<void>;\n    /**\n     * An event fired after the animation triggered by calling `.hide()` method has finished.\n     *\n     * It can only occur in 2 different scenarios:\n     * - `autohide` timeout fires\n     * - user clicks on a closing cross\n     *\n     * Additionally this output is purely informative. The toast won't be removed from DOM automatically, it's up\n     * to the user to take care of that.\n     *\n     * @since 8.0.0\n     */\n    hidden: EventEmitter<void>;\n    constructor(ariaLive: string, config: NgbToastConfig, _zone: NgZone, _element: ElementRef);\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Triggers toast closing programmatically.\n     *\n     * The returned observable will emit and be completed once the closing transition has finished.\n     * If the animations are turned off this happens synchronously.\n     *\n     * Alternatively you could listen or subscribe to the `(hidden)` output\n     *\n     * @since 8.0.0\n     */\n    hide(): Observable<void>;\n    /**\n     * Triggers toast opening programmatically.\n     *\n     * The returned observable will emit and be completed once the opening transition has finished.\n     * If the animations are turned off this happens synchronously.\n     *\n     * Alternatively you could listen or subscribe to the `(shown)` output\n     *\n     * @since 8.0.0\n     */\n    show(): Observable<void>;\n    private _init;\n    private _clearTimeout;\n}\n"]}