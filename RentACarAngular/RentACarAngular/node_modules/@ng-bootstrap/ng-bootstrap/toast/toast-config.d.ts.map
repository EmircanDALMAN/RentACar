{"version":3,"file":"toast-config.d.ts","sources":["toast-config.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NgbConfig } from '../ngb-config';\n/**\n * Interface used to type all toast config options. See `NgbToastConfig`.\n *\n * @since 5.0.0\n */\nexport interface NgbToastOptions {\n    /**\n     * Specify if the toast component should emit the `hide()` output\n     * after a certain `delay` in ms.\n     */\n    autohide?: boolean;\n    /**\n     * Delay in ms after which the `hide()` output should be emitted.\n     */\n    delay?: number;\n    /**\n     * Type of aria-live attribute to be used.\n     *\n     * Could be one of these 2 values (as string):\n     * - `polite` (default)\n     * - `alert`\n     */\n    ariaLive?: 'polite' | 'alert';\n}\n/**\n * Configuration service for the NgbToast component. You can inject this service, typically in your root component,\n * and customize the values of its properties in order to provide default values for all the toasts used in the\n * application.\n *\n * @since 5.0.0\n */\nexport declare class NgbToastConfig implements NgbToastOptions {\n    private _ngbConfig;\n    autohide: boolean;\n    delay: number;\n    ariaLive: 'polite' | 'alert';\n    private _animation;\n    constructor(_ngbConfig: NgbConfig);\n    get animation(): boolean;\n    set animation(animation: boolean);\n}\n"]}