{"version":3,"file":"carousel.d.ts","sources":["carousel.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList, TemplateRef, AfterViewInit } from '@angular/core';\nimport { NgbCarouselConfig } from './carousel-config';\nimport { NgbSlideEventDirection } from './carousel-transition';\n/**\n * A directive that wraps the individual carousel slide.\n */\nexport declare class NgbSlide {\n    tplRef: TemplateRef<any>;\n    /**\n     * Slide id that must be unique for the entire document.\n     *\n     * If not provided, will be generated in the `ngb-slide-xx` format.\n     */\n    id: string;\n    /**\n     * An event emitted when the slide transition is finished\n     *\n     * @since 8.0.0\n     */\n    slid: EventEmitter<NgbSingleSlideEvent>;\n    constructor(tplRef: TemplateRef<any>);\n}\n/**\n * Carousel is a component to easily create and control slideshows.\n *\n * Allows to set intervals, change the way user interacts with the slides and provides a programmatic API.\n */\nexport declare class NgbCarousel implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy {\n    private _platformId;\n    private _ngZone;\n    private _cd;\n    private _container;\n    slides: QueryList<NgbSlide>;\n    NgbSlideEventSource: typeof NgbSlideEventSource;\n    private _destroy$;\n    private _interval$;\n    private _mouseHover$;\n    private _focused$;\n    private _pauseOnHover$;\n    private _pauseOnFocus$;\n    private _pause$;\n    private _wrap$;\n    /**\n     * A flag to enable/disable the animations.\n     *\n     * @since 8.0.0\n     */\n    animation: boolean;\n    /**\n     * The slide id that should be displayed **initially**.\n     *\n     * For subsequent interactions use methods `select()`, `next()`, etc. and the `(slide)` output.\n     */\n    activeId: string;\n    /**\n     * Time in milliseconds before the next slide is shown.\n     */\n    set interval(value: number);\n    get interval(): number;\n    /**\n     * If `true`, will 'wrap' the carousel by switching from the last slide back to the first.\n     */\n    set wrap(value: boolean);\n    get wrap(): boolean;\n    /**\n     * If `true`, allows to interact with carousel using keyboard 'arrow left' and 'arrow right'.\n     */\n    keyboard: boolean;\n    /**\n     * If `true`, will pause slide switching when mouse cursor hovers the slide.\n     *\n     * @since 2.2.0\n     */\n    set pauseOnHover(value: boolean);\n    get pauseOnHover(): boolean;\n    /**\n     * If `true`, will pause slide switching when the focus is inside the carousel.\n     */\n    set pauseOnFocus(value: boolean);\n    get pauseOnFocus(): boolean;\n    /**\n     * If `true`, 'previous' and 'next' navigation arrows will be visible on the slide.\n     *\n     * @since 2.2.0\n     */\n    showNavigationArrows: boolean;\n    /**\n     * If `true`, navigation indicators at the bottom of the slide will be visible.\n     *\n     * @since 2.2.0\n     */\n    showNavigationIndicators: boolean;\n    /**\n     * An event emitted just before the slide transition starts.\n     *\n     * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\n     */\n    slide: EventEmitter<NgbSlideEvent>;\n    /**\n     * An event emitted right after the slide transition is completed.\n     *\n     * See [`NgbSlideEvent`](#/components/carousel/api#NgbSlideEvent) for payload details.\n     *\n     * @since 8.0.0\n     */\n    slid: EventEmitter<NgbSlideEvent>;\n    private _transitionIds;\n    set mouseHover(value: boolean);\n    get mouseHover(): boolean;\n    set focused(value: boolean);\n    get focused(): boolean;\n    constructor(config: NgbCarouselConfig, _platformId: any, _ngZone: NgZone, _cd: ChangeDetectorRef, _container: ElementRef);\n    arrowLeft(): void;\n    arrowRight(): void;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Navigates to a slide with the specified identifier.\n     */\n    select(slideId: string, source?: NgbSlideEventSource): void;\n    /**\n     * Navigates to the previous slide.\n     */\n    prev(source?: NgbSlideEventSource): void;\n    /**\n     * Navigates to the next slide.\n     */\n    next(source?: NgbSlideEventSource): void;\n    /**\n     * Pauses cycling through the slides.\n     */\n    pause(): void;\n    /**\n     * Restarts cycling through the slides from left to right.\n     */\n    cycle(): void;\n    /**\n     * Set the focus on the carousel.\n     */\n    focus(): void;\n    private _cycleToSelected;\n    private _getSlideEventDirection;\n    private _getSlideById;\n    private _getSlideIdxById;\n    private _getNextSlide;\n    private _getPrevSlide;\n    private _getSlideElement;\n}\n/**\n * A slide change event emitted right after the slide transition is completed.\n */\nexport interface NgbSlideEvent {\n    /**\n     * The previous slide id.\n     */\n    prev: string;\n    /**\n     * The current slide id.\n     */\n    current: string;\n    /**\n     * The slide event direction.\n     *\n     * Possible values are `'left' | 'right'`.\n     */\n    direction: NgbSlideEventDirection;\n    /**\n     * Whether the pause() method was called (and no cycle() call was done afterwards).\n     *\n     * @since 5.1.0\n     */\n    paused: boolean;\n    /**\n     * Source triggering the slide change event.\n     *\n     * Possible values are `'timer' | 'arrowLeft' | 'arrowRight' | 'indicator'`\n     *\n     * @since 5.1.0\n     */\n    source?: NgbSlideEventSource;\n}\n/**\n * A slide change event emitted right after the slide transition is completed.\n *\n * @since 8.0.0\n */\nexport interface NgbSingleSlideEvent {\n    /**\n     * true if the slide is shown, false otherwise\n     */\n    isShown: boolean;\n    /**\n     * The slide event direction.\n     *\n     * Possible values are `'left' | 'right'`.\n     */\n    direction: NgbSlideEventDirection;\n    /**\n     * Source triggering the slide change event.\n     *\n     * Possible values are `'timer' | 'arrowLeft' | 'arrowRight' | 'indicator'`\n     *\n     */\n    source?: NgbSlideEventSource;\n}\nexport declare enum NgbSlideEventSource {\n    TIMER = \"timer\",\n    ARROW_LEFT = \"arrowLeft\",\n    ARROW_RIGHT = \"arrowRight\",\n    INDICATOR = \"indicator\"\n}\nexport declare const NGB_CAROUSEL_DIRECTIVES: (typeof NgbSlide | typeof NgbCarousel)[];\n"]}