{"version":3,"file":"rating.d.ts","sources":["rating.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { NgbRatingConfig } from './rating-config';\nimport { ControlValueAccessor } from '@angular/forms';\n/**\n * The context for the custom star display template defined in the `starTemplate`.\n */\nexport interface StarTemplateContext {\n    /**\n     * The star fill percentage, an integer in the `[0, 100]` range.\n     */\n    fill: number;\n    /**\n     * Index of the star, starts with `0`.\n     */\n    index: number;\n}\n/**\n * A directive that helps visualising and interacting with a star rating bar.\n */\nexport declare class NgbRating implements ControlValueAccessor, OnInit, OnChanges {\n    private _changeDetectorRef;\n    contexts: StarTemplateContext[];\n    disabled: boolean;\n    nextRate: number;\n    /**\n     * The maximal rating that can be given.\n     */\n    max: number;\n    /**\n     * The current rating. Could be a decimal value like `3.75`.\n     */\n    rate: number;\n    /**\n     * If `true`, the rating can't be changed.\n     */\n    readonly: boolean;\n    /**\n     * If `true`, the rating can be reset to `0` by mouse clicking currently set rating.\n     */\n    resettable: boolean;\n    /**\n     * The template to override the way each star is displayed.\n     *\n     * Alternatively put an `<ng-template>` as the only child of your `<ngb-rating>` element\n     */\n    starTemplate: TemplateRef<StarTemplateContext>;\n    starTemplateFromContent: TemplateRef<StarTemplateContext>;\n    /**\n     * An event emitted when the user is hovering over a given rating.\n     *\n     * Event payload equals to the rating being hovered over.\n     */\n    hover: EventEmitter<number>;\n    /**\n     * An event emitted when the user stops hovering over a given rating.\n     *\n     * Event payload equals to the rating of the last item being hovered over.\n     */\n    leave: EventEmitter<number>;\n    /**\n     * An event emitted when the user selects a new rating.\n     *\n     * Event payload equals to the newly selected rating.\n     */\n    rateChange: EventEmitter<number>;\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    constructor(config: NgbRatingConfig, _changeDetectorRef: ChangeDetectorRef);\n    ariaValueText(): string;\n    isInteractive(): boolean;\n    enter(value: number): void;\n    handleBlur(): void;\n    handleClick(value: number): void;\n    handleKeyDown(event: KeyboardEvent): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    reset(): void;\n    setDisabledState(isDisabled: boolean): void;\n    update(value: number, internalChange?: boolean): void;\n    writeValue(value: any): void;\n    private _updateState;\n}\n"]}