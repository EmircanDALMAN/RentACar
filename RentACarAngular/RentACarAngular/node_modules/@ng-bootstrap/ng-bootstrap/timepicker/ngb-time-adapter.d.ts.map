{"version":3,"file":"ngb-time-adapter.d.ts","sources":["ngb-time-adapter.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgbTimeStruct } from './ngb-time-struct';\nexport declare function NGB_DATEPICKER_TIME_ADAPTER_FACTORY(): NgbTimeStructAdapter;\n/**\n * An abstract service that does the conversion between the internal timepicker `NgbTimeStruct` model and\n * any provided user time model `T`, ex. a string, a native date, etc.\n *\n * The adapter is used **only** for conversion when binding timepicker to a form control,\n * ex. `[(ngModel)]=\"userTimeModel\"`. Here `userTimeModel` can be of any type.\n *\n * The default timepicker implementation assumes we use `NgbTimeStruct` as a user model.\n *\n * See the [custom time adapter demo](#/components/timepicker/examples#adapter) for an example.\n *\n * @since 2.2.0\n */\nexport declare abstract class NgbTimeAdapter<T> {\n    /**\n     * Converts a user-model time of type `T` to an `NgbTimeStruct` for internal use.\n     */\n    abstract fromModel(value: T | null): NgbTimeStruct | null;\n    /**\n     * Converts an internal `NgbTimeStruct` time to a user-model time of type `T`.\n     */\n    abstract toModel(time: NgbTimeStruct | null): T | null;\n}\nexport declare class NgbTimeStructAdapter extends NgbTimeAdapter<NgbTimeStruct> {\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     */\n    fromModel(time: NgbTimeStruct | null): NgbTimeStruct | null;\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     */\n    toModel(time: NgbTimeStruct | null): NgbTimeStruct | null;\n}\n"]}