{"version":3,"file":"day-calendar.component.d.ts","sources":["day-calendar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ECalendarValue } from '../common/types/calendar-value-enum';\nimport { SingleCalendarValue } from '../common/types/single-calendar-value';\nimport { ECalendarMode } from '../common/types/calendar-mode-enum';\nimport { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChange, SimpleChanges } from '@angular/core';\nimport { DayCalendarService } from './day-calendar.service';\nimport { Moment, unitOfTime } from 'moment';\nimport { IDayCalendarConfig, IDayCalendarConfigInternal } from './day-calendar-config.model';\nimport { IDay } from './day.model';\nimport { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';\nimport { CalendarValue } from '../common/types/calendar-value';\nimport { UtilsService } from '../common/services/utils/utils.service';\nimport { IMonthCalendarConfig } from '../month-calendar/month-calendar-config';\nimport { IMonth } from '../month-calendar/month.model';\nimport { DateValidator } from '../common/types/validator.type';\nimport { INavEvent } from '../common/models/navigation-event.model';\nexport declare class DayCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\n    readonly dayCalendarService: DayCalendarService;\n    readonly utilsService: UtilsService;\n    readonly cd: ChangeDetectorRef;\n    config: IDayCalendarConfig;\n    displayDate: SingleCalendarValue;\n    minDate: Moment;\n    maxDate: Moment;\n    theme: string;\n    onSelect: EventEmitter<IDay>;\n    onMonthSelect: EventEmitter<IMonth>;\n    onNavHeaderBtnClick: EventEmitter<ECalendarMode>;\n    onGoToCurrent: EventEmitter<void>;\n    onLeftNav: EventEmitter<INavEvent>;\n    onRightNav: EventEmitter<INavEvent>;\n    CalendarMode: typeof ECalendarMode;\n    isInited: boolean;\n    componentConfig: IDayCalendarConfigInternal;\n    weeks: IDay[][];\n    weekdays: Moment[];\n    inputValue: CalendarValue;\n    inputValueType: ECalendarValue;\n    validateFn: DateValidator;\n    currentCalendarMode: ECalendarMode;\n    monthCalendarConfig: IMonthCalendarConfig;\n    _shouldShowCurrent: boolean;\n    navLabel: string;\n    showLeftNav: boolean;\n    showRightNav: boolean;\n    api: {\n        moveCalendarsBy: any;\n        moveCalendarTo: any;\n        toggleCalendarMode: any;\n    };\n    constructor(dayCalendarService: DayCalendarService, utilsService: UtilsService, cd: ChangeDetectorRef);\n    _selected: Moment[];\n    get selected(): Moment[];\n    set selected(selected: Moment[]);\n    _currentDateView: Moment;\n    get currentDateView(): Moment;\n    set currentDateView(current: Moment);\n    ngOnInit(): void;\n    init(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    writeValue(value: CalendarValue): void;\n    registerOnChange(fn: any): void;\n    onChangeCallback(_: any): void;\n    registerOnTouched(fn: any): void;\n    validate(formControl: FormControl): ValidationErrors | any;\n    processOnChangeCallback(value: Moment[]): CalendarValue;\n    initValidators(): void;\n    dayClicked(day: IDay): void;\n    getDayBtnText(day: IDay): string;\n    getDayBtnCssClass(day: IDay): {\n        [klass: string]: boolean;\n    };\n    onLeftNavClick(): void;\n    onRightNavClick(): void;\n    onMonthCalendarLeftClick(change: INavEvent): void;\n    onMonthCalendarRightClick(change: INavEvent): void;\n    onMonthCalendarSecondaryLeftClick(change: INavEvent): void;\n    onMonthCalendarSecondaryRightClick(change: INavEvent): void;\n    getWeekdayName(weekday: Moment): string;\n    toggleCalendarMode(mode: ECalendarMode): void;\n    monthSelected(month: IMonth): void;\n    moveCalendarsBy(current: Moment, amount: number, granularity?: unitOfTime.Base): void;\n    moveCalendarTo(to: SingleCalendarValue): void;\n    shouldShowCurrent(): boolean;\n    goToCurrent(): void;\n    handleConfigChange(config: SimpleChange): void;\n}\n"]}